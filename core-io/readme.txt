【网络通信】

java网络通信技术的演变：
	socket（阻塞式  + 服务端使用线程池处理请求任务） 
				-> NIO（IO多路复用技术） 
								 -> AIO（异步IO，减少了阻塞等待数据从内核复制到用户空间的过程）

BIO(blocking input/output)	为同步阻塞模式。

NIO(nonblocking input/output)	为同步非阻塞模式，NIO并没有实现异步。

NIO2.0/AIO(asynchronous input/output)	在JDK1.7之后，升级了NIO包，支持异步非阻塞通信模型，即NIO2.0(也称为AIO)

参考：http://blog.csdn.net/anxpp/article/details/51512200

------------------------------------------
阻塞与非阻塞
	阻塞：	应用程序在获取网络数据的时候，如果网络数据传输很慢，那么程序会一直阻塞等待，知道数据传输完毕。
	非阻塞：应用程序可以直接处理已经准备好的数据，无需等待。


同步与异步（同步和异步一般是指操作系统和应用程序在IO操作的层面上进行区分的）
	同步：同步时，应用程序会直接参与IO读写操作。应用程序会阻塞在某个方法上，直到数据准备就绪；或者以轮询的方式检测数据是否就绪。
		同步时，数据从内核拷贝到用户进程空间的过程中，应用程序都会处于阻塞等待。
	异步：异步时，应用程序不参与IO读写操作，所有IO读写全部交给操作系统处理。当操作系统完成IO读写时，会以事件的方式通知应用程序，此时应用程序再处理已准备好的数据。
		异步时，操作系统会将数据从内核拷贝到用户进程空间，然后以事件方式通知应用程序处理数据。

------------------------------------------
NIO 三大核心组件
	Buffer
		提供数据缓存区，channel都是操作缓冲区来完成数据读写操作的。
	Channel
		支持双向数据传输的通道。
	Selector
		选择器，使用1个线程不断轮询所有注册的channel的状态，返回所有就绪的channel集合。
		selector多路复用器可以复制成千上万的channel通道，没有上限，底层是使用epoll替代传统select的实现，获得连接句柄没有限制。
		也就意味着，只需要1个线程复制selector的轮询，就可以接入成千上万个客户端，这就是NIO最大的进步。---IO多路复用技术

AIO
	AIO在NIO基础之上，引入了异步通道的概念，提供了文件或套接字的异步通信框架，从而真正实现了异步非阻塞的IO模型。
	AIO底层利用操作系统的epoll机制，在数据准备就绪之后，以事件方式通知应用程序读取数据，对应用程序屏蔽了底层网络通信连接与数据准备的细节。
	AIO不需要通过多路复用器对注册的通道进行轮询操作即可实现异步读写，提供了更简化更高效的IO操作。
	NIO只是同步非阻塞，并没有实现异步IO。AIO才是真正的异步非阻塞IO。
	