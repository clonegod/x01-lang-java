Synchronized 底层是怎么实现的？


monitor的相关概念
每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，

线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：
1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。
2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.
3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。

------------------------------------------------------------

反编译示例代码TestSynchronized
javap -c TestSynchronized.class

1、对于采用synchronized同步代码块的情况：
	通过反编译后的字节码指令，可看到synchronized 被替换为了 monitorenter 和 monitorexit，通过对监视器对象的获取来实现线程同步。 
	 public void run();
	   Code:
	      0: aload_0
	      1: dup
	      2: astore_1
	      3: monitorenter		# 尝试进入monitor监视器
	      4: aload_0
		...
	     51: aload_1
	     52: monitorexit		# 退出进入monitor监视器
	    ...

2、对于在方法上使用synchronized的情况：
	反编译结果没有看到 monitorenter 和 monitorexit，那jvm又是怎么实现同步的呢？
	

------------------------------------------------------------
synchronized底层实现涉及两个层面的控制：
	1、JVM字节码层面：monitorenter 和 monitorexit
	2、操作系统层面：锁关联到信号量的获取与释放

关键词synchronize可以说是个语法糖，简而言之就是对一个对象“加锁”。
首先，这里的对象指的不一定是堆里面的类的实例对象，也有可能是方法区的类对象。（锁一定是关联在某个具体的对象上的，可能是一个实例对象，也可能是一个类的字节码对象。）
其次，这个关键词修饰的代码块的加锁过程有两个，进入的时候尝试获得锁（java字节码 monitorenter），退出时释放锁（java字节码monitorexit）。

这两个操作的再下一层是基于mutex lock的lock()和unluck()。
这两个函数的具体实现由操作系统提供。
lock()操作是“获得锁”“上锁”“进入临界区”，等等，不同的地方描述不一致。
它的具体过程是：
查看一个信号量（由这个锁持有），看当前能否获得锁，如果能直接获得，并且修改这个信号量的值（比如把1改成0）。
如果不能，就把这个索取锁的线程自己加入一个队列，这队列专门放阻塞在这个对象（这个锁）上的线程。
unlock()操作是“释放锁”“解锁”“离开临界区”。它可以直接修改信号量的值。同时它看是否有进程“阻塞”在这个对象（锁）上。
如果有，唤醒它放入就绪队列。（信号量的具体实现各不相同，记录型信号量可以更方便理解这个过程）。
当然这些基础操作也是原子性的。




