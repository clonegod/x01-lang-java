DI有助于应用对象之间的解耦， 而AOP可以实现横切关注点与它们所影响的对象之间的解耦。

切面的作用：将横切关注点与业务逻辑相分离

切面的应用场景：
	日志、 安全和事务管理、缓存  ---- 业务模块统一需要的辅助功能

横切关注点（crosscutting concern） 
	横切关注点散布于应用中多处的功能, 从概念上是与应用的业务逻辑相分离的（往往会直接嵌入到应用的业务逻辑之中）.
	横切关注点可以被描述为影响应用多处的功能

面向切面编程（AOP）相关术语 ：
	切面-Aspect
		横切关注点可以被模块化为特殊的类，这些类被称为切面（aspect）
		切面封装了通知和切点。通知和切点共同定义了切面的全部内容——做什么， 在何时以及何处完成其功能。
	通知-Advice
		通知定义了切面需要做“什么”，以及“何时”使用。
		前置通知（Before）
		后置通知（After）
		返回通知（After-returning） 
		异常通知（After-throwing）
		环绕通知（Around） 
	切点-PointCut
		切点就定义了在“何处”将匹配的通知织入一个或多个连接点 ----通知被应用的具体位置
	连接点-JoinPoint
		程序执行过程中能够应用通知的某个点
	织入（Weaving）
		织入是把切面应用到目标对象并创建新的代理对象的过程。 
		切面在指定的连接点被织入到目标对象中。 在目标对象的生命周期里有多个点可以进行织入：
			编译期： 切面在目标类编译时被织入。 这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。 
			类加载期：切面在目标类加载到JVM时被织入。 需要特殊的类加载器（ClassLoader） ， 它可以在目标类被引入应用之前增强该目标类的字节码。 
				   AspectJ 5的加载时织入（load-timeweaving， LTW） 就支持以这种方式织入切面。
			运行期：切面在应用运行的某个时刻被织入。 一般情况下， 在织入切面时， AOP容器会为目标对象动态地创建一个代理对象。
				   Spring AOP就是以这种方式织入切面的。

		
======================================================================================

Spring AOP：
	构建在动态代理基础之上， 因此， Spring对AOP的支持局限于方法拦截。
	因为Spring基于动态代理， 所以Spring只支持方法连接点。

Spring对切面的支持：
	1. 声明式AOP---xml
		Spring的aop命名空间， 我们可以将纯POJO转换为切面
	2. 基于注解的AOP---通过少量注解把任意类转变为切面。
		@Aspect
		
Spring借助AspectJ的切点表达式语言来定义Spring切面
	注意：execution指示器是编写切点定义时最主要使用的指示器。 在此基础上， 可以结合使用其他指示器来进一步限制匹配（and, or, not）！
	
	execution() 用于匹配是连接点的执行方法---按返回值，包级，类名，方法名，方法参数类型多个维度来定义切点
	
	辅助限定：
	arg() 	限制连接点匹配参数为指定类型的执行方法---方法参数类型
	@args() 限制连接点匹配参数由指定注解标注的执行方法---方法参数注解
	
	@annotation 限定匹配带有指定注解的连接点	--- 方法注解
	
	target 限制连接点匹配目标对象为指定类型的类---类类型
	@target()限制连接点匹配特定的执行对象， 这些对象对应的类要具有指定类型的注解---类上的注解

	this() 限制连接点匹配AOP代理的bean引用为指定类型的类---?
	
	within() 限制连接点匹配指定的类型 --- 包级范围，或具体到某个类，但是不可以指定到方法级别上
	@within()限制连接点匹配指定注解所标注的类型（当使用Spring AOP时， 方法定义在由指定的注解所标注的类里）---???
	

