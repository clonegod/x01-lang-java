# 定义应用的名称
spring.application.name=spring-cloud-stream-kafka

# 配置Web服务端口
server.port = 8080

# 关闭安全
management.security.enabled=false


## Spring Kafka 配置信息

app.kafka.topic=kafkaTopic01

spring.kafka.bootstrap-servers=localhost:9092

# Kafka 生产者(配置key,value的序列化方式) --- stream方式下，序列化必须使用ByteArraySerializer
#spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# Kafka 消费者(配置key,value的反序列化方式)
#spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.group-id=kafka_consumer_group_01
#spring.kafka.consumer.max-poll-records=2


################################
## 定义 Spring Cloud Stream Source 消息的流向
### 针对kafka而言，bindings配置的基本模式如下：
### spring.cloud.stream.bindings.${channel-name}.destination=${topic-name}

# 默认提供的source: 名称为output
# 为messageChannel绑定对应的topic（这里的output即为MessageChannel的名称）
# output 即 org.springframework.cloud.stream.messaging.Source中的OUTPUT字段的值，两者一一对应
spring.cloud.stream.bindings.output.destination=${app.kafka.topic}

# 自定义的source: 名称为myoutput
spring.cloud.stream.bindings.myoutput.destination=${app.kafka.topic}

# 默认提供的sink: 名称为input
spring.cloud.stream.bindings.input.destination=${app.kafka.topic}
